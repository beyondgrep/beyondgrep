[% WRAPPER wrapper/page.ttml title='More tools for searching source code' %]

<div class="content">

    <h1>Tools that work with ack</h1>

    <h2>AckMate</h2>

    <p>
    Users of <a href="https://macromates.com/">TextMate</a>, the
    programmer's editor for the Mac, can use the AckMate plugin by
    Trevor Squires:
    </p>

    <blockquote>
        TextMate users know just how slow its "Find in Project"
        can be with large source trees. That's why you need
        "ack-in-project" &mdash; a TextMate bundle that uses
        the super-speedy "ack" tool to search your code
        FAST. It gives you beautiful, clickable results just
        as fast as "ack" can find them. Check it out at:
        [% WRAPPER selflink.tt %]https://github.com/protocool/ackmate[% END %]
    </blockquote>

    <h2>ack.vim</h2>
    <p>
    ack.vim provides an interface between ack and vim. For example,
    you can call <code>:Ack foo</code>, which will run ack and load
    ack's results into a vim buffer for manipulation and navigation.
    <p>
    <p>
    ack.vim is available at the official vim website at
    [% WRAPPER selflink.tt %]https://www.vim.org/scripts/script.php?script_id=2572[% END %]
    </p>

    <h2>ack2vim</h2>
    <p>
    ack2vim eases the interface beween ack and vim, so that ack's findings can be found with vim as well.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://github.com/jalanb/ack2vim[% END %]
    </p>

    <h2>Emacs integration</h2>
    <p>
    There are at least four different Emacs modes for supporting ack here at the Emacs Wiki: 
    [% WRAPPER selflink.tt %]https://www.emacswiki.org/emacs/Ack[% END %]
    </p>

    <p>
    Note: Be careful of any solution that defaults you to using
    <tt>--all</tt>, since that option no longer exists in ack 2.
    </p>

    <h2>hhighlighter</h2>
    <p>
    hhlighter is a wrapper around ack to make it easy to highlight words in a file.  Invoke it like

    <blockquote><tt>
    cat file | h foo bar bat
    </tt></blockquote>

    and each of the three words "foo", "bar" and "bat" will be highlighted as a different color.
    See [% WRAPPER selflink.tt %]https://github.com/paoloantinori/hhighlighter[% END %]
    <p>

    <h1>Other grep-like tools</h1>

    <p>
    There are many ways to search source code that are more flexible
    and tuned to programmers than straight <code>grep</code>.  I
    suggest you take a look at some of these alternatives, for they
    may suit your needs better than ack.  If you have any suggestions
    to add to this list, please let me know at
    [% WRAPPER email.tt %]andy@petdance.com[% END %] or submit an issue at
    [% WRAPPER selflink.tt %]https://github.com/petdance/beyondgrep/issues[% END %].
    <p>

    <h2>ag, the Silver Searcher</h2>
    <p>
    Geoff Greer says "ag is like ack, but better. It's fast. It's
    damn fast. The only thing faster is stuff that builds indices
    beforehand, like <a href="http://ctags.sourceforge.net/">Exuberant Ctags</a>."
    Geoff has also created a fork of AckMate that uses Ag instead
    of ack.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://github.com/ggreer/the_silver_searcher[% END %]
    </p>


    <h2>cgrep</h2>
    <p>
    Cgrep is a grep tool suitable for searching in large code
    repositories. It supports 30 programming languages and searches
    that go beyond the simple pattern matching. It enables context-aware
    filtering and semantic searches through wildcard and combinators.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://awgn.github.io/cgrep/[% END %]
    </p>


    <h2>grab</h2>
    <p>
    grab is another faster grep alternative that tries to use multiple
    cores. It also uses parallel processing, mmap and other speedy tricks
    behind the scenes.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://github.com/stealth/grab[% END %]
    </p>


    <h2>glark</h2>
    <p>
    The biggest departure from ack, glark adds many more features like
    the ability to AND and OR your patterns.  It's written in Ruby.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://github.com/jpace/glark[% END %]
    </p>


    <h2>greple</h2>
    <p>
    greple is a search tools that lets you search for multiple keywords at a time.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://github.com/kaz-utashiro/greple[% END %]
    </p>


    <h2>grin</h2>
    <p>
    "A grep program configured the way I like it", written in Python
    by Robert Kern.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://pypi.python.org/pypi/grin[% END %]
    </p>


    <h2>kaki</h2>
    <p>
    kaki is inspired by ack, and built on top of nodejs.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://github.com/FelipeBB/kaki[% END %]
    </p>


    <h2>nak</h2>
    <p>
    An implementation of ack, written in Node.js. It has inspiration from
    Ag, and is optimized for speed, not features. It's completely
    asynchronous. Written by Garen J. Torikian.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://github.com/gjtorikian/nak[% END %]
    </p>


    <h2>paragrep</h2>
    <p>
    paragrep is a text search tool that operates at the paragraph level.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://software.clapper.org/paragrep/[% END %]
    </p>


    <h2>pcregrep</h2>
    <p>
    pcregrep looks like it's just a regular grep, but with a PCRE regex engine.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://www.rexegg.com/pcregrep-pcretest.html[% END %]
    </p>


    <h2>pss</h2>
    <p>
    pss is an ack clone written in Python by Eli Bendersky.  It's
    written in pure Python with no additional modules necessary.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://github.com/eliben/pss/[% END %]
    </p>


    <h2>pt, the Platinum Searcher</h2>
    <p>
    The Platinum Searcher is another code search tool similar to ack
    and ag. It supports multi platforms and multi encodings.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://github.com/monochromegane/the_platinum_searcher[% END %]
    </p>


    <h2>rak</h2>
    <p>
    A straight clone of ack, with some visual tweaks, written in Ruby
    by Daniel Lucraft.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://github.com/danlucraft/rak[% END %]
    </p>


    <h2>ripgrep</h2>
    <p>
    ripgrep is written in Rust and claims to be "faster than everything else".
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://github.com/BurntSushi/ripgrep[% END %]
    </p>


    <h2>sift</h2>
    <p>
    sift is a search tool written in Go.  It claims to be very faster, faster than ag.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://sift-tool.org[% END %]
    </p>


    <h2>spot</h2>
    <p>
    spot is a tiny search utility that adapts some of ack's features.
    It's simple and uses find+grep+awk.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://github.com/rauchg/spot[% END %]
    </p>


    <h2>UniversalCodeGrep (ucg)</h2>
    <p>
    A fast ack-like search tool that is written in C++ using PCRE and makes
    use of concurrency.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://gvansickle.github.io/ucg/[% END %]
    </p>


    <h2>vack</h2>
    <p>
    vack is visual ack for the Mac.
    </p>
    <p>
    [% WRAPPER selflink.tt %]https://blog.kowalczyk.info/software/vack/[% END %]
    </p>


    <h1>Indexing tools</h1>
    <p>
    Sometimes when you're looking at a large codebase, it makes
    sense to see everything as a whole.  An indexing tool may help
    you out.
    </p>

    <h2>ctags</h2>
    <p>
    ctags is a program almost as old as time itself.  When run
    against a codebase, ctags indexes various elements of the code,
    such as variables and functions.  This lets your editor or other
    tools use the tags index to jump quickly to that element.
    </p>

    <p>
    The most common ctags implementation is Exuberant ctags:
    [% WRAPPER selflink.tt %]http://ctags.sourceforge.net/[% END %]
    </p>

    <h2>cscope</h2>
    <p>
    Cscope is a developer's tool for browsing source code.  Cscope
    was part of the official AT&amp;T Unix distribution for many
    years, and has been used to manage projects involving 20 million
    lines of code.  It also can integrate with vim and Emacs.
    </p>

    <p>
    [% WRAPPER selflink.tt %]http://cscope.sourceforge.net/[% END %]
    </p>

    <h2>CodeQuery</h2>

    CodeQuery indexes and queries C, C++, Java and Python source
    code. It builds upon the databases of cscope and ctags, mentioned
    above, and provides a nice GUI tool.

    <p>
    [% WRAPPER selflink.tt %]https://github.com/ruben2020/codequery[% END %]
    </p>

    <h2>Code Search</h2>
    <p>
    Russ Cox, the guy that wrote Google's CodeSearch engine, wrote
    <a href="https://swtch.com/~rsc/regexp/regexp4.html">an article about how it worked</a>
    and released an implementation in Go.
    </p>

    <p>
    [% WRAPPER selflink.tt %]https://code.google.com/p/codesearch/[% END %]
    </p>

    <h2>OpenGrok</h2>
    <p>
    OpenGrok is a fast and usable source code search and cross
    reference engine. It helps you search, cross-reference and
    navigate your source tree.
    </p>

    <p>
    [% WRAPPER selflink.tt %]https://oracle.github.io/opengrok/[% END %]
    </p>

    <h2>GNU GLOBAL</h2>
    <p>
    GNU GLOBAL is a source code tagging system that works the same
    way across diverse environments (emacs, vi, less, bash, web
    browser, etc). You can locate objects in source files and move
    there easily.  It is similar to ctags or etags but is different
    from them at the point of independence of any editor.
    </p>

    <p>
    [% WRAPPER selflink.tt %]https://www.gnu.org/software/global/[% END %]
    </p>

    <h2>beagrep</h2>
    <p>
    Beagrep is a combination of a desktop search engine named beagle
    and grep. Use the search engine first, then use grep on the small
    subset of possibly matching files, thus it is very fast and useful
    for code reading in huge source trees.
    </p>

    <p>
    [% WRAPPER selflink.tt %]https://baohaojun.github.io/beagrep.html[% END %]
    </p>

    <h2>Hound</h2>
    <p>
    Hound provides a centralized web front-end to a regex-searchable
    text index of multiple Git repositories. It was created by engineers
    at <a href="https://www.etsy.com/">Etsy</a> to handle searching
    across codebases.
    </p>

    <p>
    [% WRAPPER selflink.tt %]https://github.com/etsy/Hound[% END %]
    </p>

    <h2>Sourcegraph</h2>
    <p>
    Sourcegraph is a horizontally scalable code search engine that
    supports regex, symbol search, and the <a href="https://comby.dev/">Comby pattern syntax</a>.
    It also has code navigation supported by a combination of the
    <a href="https://microsoft.github.io/language-server-protocol/specifications/lsif/0.4.0/specification/">Language Server Index Format</a>
    and a ctags-like backend. The core application is open source, but
    enterprise features such as SSO are available only in a proprietary
    version of the application.
    </p>

    <p>
    [% WRAPPER selflink.tt %]https://sourcegraph.com[% END %]
    </p>

</div>

[% END %]
